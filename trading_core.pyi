import collections.abc
import typing
from _typeshed import Incomplete
from typing import ClassVar

BUY: Side
LIMIT: OrderType
MARKET: OrderType
SELL: Side

class EventDispatcher:
    def __init__(self) -> None: ...
    def publish_market_data(self, arg0: MarketDataEvent) -> None: ...
    def publish_order_accepted(self, arg0: OrderAcceptedEvent) -> None: ...
    def publish_order_cancelled(self, arg0: OrderCancelledEvent) -> None: ...
    def publish_trade_executed(self, arg0: TradeExecutedEvent) -> None: ...
    def subscribe_market_data(self, arg0: collections.abc.Callable[[MarketDataEvent], None]) -> None: ...
    def subscribe_order_accepted(self, arg0: collections.abc.Callable[[OrderAcceptedEvent], None]) -> None: ...
    def subscribe_order_cancelled(self, arg0: collections.abc.Callable[[OrderCancelledEvent], None]) -> None: ...
    def subscribe_trade_executed(self, arg0: collections.abc.Callable[[TradeExecutedEvent], None]) -> None: ...

class LimitOrder(Order):
    def __init__(self, arg0: str, arg1: typing.SupportsInt, arg2: OrderType, arg3: Side, arg4: str, arg5: typing.SupportsInt, arg6: typing.SupportsInt) -> None: ...
    def get_price(self) -> int: ...
    def get_quantity(self) -> int: ...

class MarketDataEvent:
    last_price: int
    symbol: str
    timestamp: int
    def __init__(self) -> None: ...

class MarketOrder(Order):
    def __init__(self, arg0: str, arg1: typing.SupportsInt, arg2: OrderType, arg3: Side, arg4: typing.SupportsInt, arg5: typing.SupportsInt) -> None: ...
    def get_quantity(self) -> int: ...

class MatchingEngine:
    def __init__(self, arg0: OrderBook, arg1: EventDispatcher) -> None: ...
    def cancel_order(self, order_id: typing.SupportsInt) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def submit_order(self, order: Order) -> int: ...

class Order:
    def __init__(self, *args, **kwargs) -> None: ...

class OrderAcceptedEvent:
    order_id: int
    price: int
    quantity: int
    def __init__(self) -> None: ...

class OrderBook:
    def __init__(self) -> None: ...

class OrderCancelledEvent:
    order_id: int
    quantity: int
    def __init__(self) -> None: ...

class OrderType:
    __members__: ClassVar[dict] = ...  # read-only
    LIMIT: ClassVar[OrderType] = ...
    MARKET: ClassVar[OrderType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: typing.SupportsInt) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Side:
    __members__: ClassVar[dict] = ...  # read-only
    BUY: ClassVar[Side] = ...
    SELL: ClassVar[Side] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: typing.SupportsInt) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TradeExecutedEvent:
    aggressing_order_id: int
    aggressing_remaining_quantity: int
    aggressing_side: Side
    aggressing_trader_id: int
    price: int
    quantity: int
    resting_order_id: int
    resting_remaining_quantity: int
    resting_trader_id: int
    symbol: str
    timestamp: Incomplete
    def __init__(self) -> None: ...
